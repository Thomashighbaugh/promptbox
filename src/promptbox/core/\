"""
Handles loading application-wide configuration settings.

This version uses two locations:
1.  The Current Working Directory (CWD) for user-provided files like .env.
    This allows the user to place their API keys in their project folder.
2.  A dedicated folder in the user's home directory (~/.promptbox) for stable
    application data like the database. This ensures the database is always
    found, regardless of where the command is run.
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# By default, python-dotenv searches for the .env file in the current working
# directory. This is the correct behavior for a command-line tool, as it
# allows the user to manage API keys in their project folder.
load_dotenv()

# Use the user's home directory to create a stable, hidden folder for
# the application's data files. This is the standard practice.
APP_HOME = Path.home() / ".promptbox"


class Settings:
    """
    A singleton-like class to hold all application settings.
    Attributes are loaded from environment variables.
    """
    def __init__(self):
        # --- API Keys (loaded by load_dotenv() from the CWD) ---
        self.mistral_api_key: str | None = os.getenv("MISTRAL_API_KEY")
        self.groq_api_key: str | None = os.getenv("GROQ_API_KEY")
        self.google_api_key: str | None = os.getenv("GOOGLE_API_KEY")
        self.cerebras_api_key: str | None = os.getenv("CEREBRAS_API_KEY")
        self.novita_api_key: str | None = os.getenv("NOVITA_API_KEY")

        # --- API Endpoints ---
        # FORCED VALUE: To ensure connection to the correct host, this is now
        # hardcoded, ignoring any potentially conflicting environment variables.
        self.ollama_api_base: str = "http://localhost:11434"

        # --- Default File Paths (relative to the app's home directory) ---
        self.data_dir: Path = APP_HOME / "data"
        self.backup_dir: Path = APP_HOME / "backups"

        # --- Overridable Paths ---
        # The database now lives in a predictable location: ~/.promptbox/data/promptbox.db
        self.database_path: Path = Path(os.getenv("DATABASE_PATH") or self.data_dir / "promptbox.db")

        # Ensure data directories exist in the user's home folder
        self._create_directories()

    def _create_directories(self):
        """
        Creates the necessary data and backup directories if they don't exist.
        """
        self.data_dir.mkdir(exist_ok=True, parents=True)
        self.backup_dir.mkdir(exist_ok=True, parents=True)
        # The database_path's parent is self.data_dir, which is already created.

    def get_api_key(self, provider: str) -> str | None:
        """A helper method to get an API key by its provider name."""
        return getattr(self, f"{provider.lower()}_api_key", None)

# Instantiate a single settings object for the entire application to use.
settings = Settings()
